type: edu
custom_name: stage6
files:
- name: test/EncryptDecryptTest.java
  visible: false
  learner_created: false
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |-
    package encryptdecrypt;

    import java.io.File;
    import java.io.PrintWriter;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.Scanner;
    public class Main {
        public static void main(String[] args){


            boolean isIn = false;
            boolean isData = false;
            boolean isOut = false;
            String inFile = "";
            String outFile = "";
            String decEnc = "enc";
            String msg = "";
            int key = 0;



            for(int i = 0,j=1;i<args.length;i+=2,j+=2){
                if(args[i].equals("-mode")){
                    decEnc = args[j];
                }
                if(args[i].equals("-data")){
                    msg = args[j];
                    isData = true;
                }
                if(args[i].equals("-key")){
                    key = Integer.parseInt(args[j]);
                }
                if (args[i].equals("-in")) {
                    inFile = args[j];
                    isIn = true;
                }
                if (args[i].equals("-out")) {
                    outFile = args[j];
                    isOut = true;
                }
            }
            if (isOut == true) {
                if (isData == true){
                    writeFileContent(outFile,resultEncDec(decEnc, msg, key));
                    //System.out.print(resultEncDec(decEnc, msg, key));
                }else if(isData == false && isIn == true && !new File(inFile).isDirectory()){
                    try {
                        writeFileContent(outFile, resultEncDec(decEnc, readFileContent(inFile), key));
                    }catch (Exception e){
                        e.printStackTrace();
                    }

                }else {
                    writeFileContent(outFile, resultEncDec(decEnc, msg, key));;
                }
            }else{
                if (isData == true){
                    System.out.print(resultEncDec(decEnc, msg, key));
                }else if(isData == false && isIn == true && !new File(inFile).isDirectory()){
                    try {
                        System.out.print(resultEncDec(decEnc, readFileContent(inFile), key));
                    }catch (Exception e){
                        e.printStackTrace();
                    }

                }else {
                    System.out.print(resultEncDec(decEnc, msg, key));
                }
            }

        }

        private static String resultEncDec(String decEnc,String msg,int key){

            if (decEnc.equals("enc")) {
                return encrypt(msg, key);
            } else {
                return decrypt(msg, key);
            }

        }

        private static String encrypt(String plainText,int key){

            String cipherText = "";
            char[] myMsg = plainText.toCharArray();
            for (char c : myMsg) {
                char ca = c;
                ca += key;
                cipherText = cipherText + ca;
            }
            return cipherText;

        }
        private static String decrypt(String cipherText,int key){

            String plainMsg = "";
            char[] myMsg = cipherText.toCharArray();
            for (char c : myMsg) {
                char ca = c;
                ca -= key;
                plainMsg = plainMsg + ca;
            }
            return plainMsg;

        }
        private static String readFileContent(String filePath){
            //return new String(Files.readAllBytes(Paths.get(filePath)));
            File file = new File(filePath);
            String content = "";
            try (Scanner scanner = new Scanner(file)){
                while (scanner.hasNextLine()) {

                    content += scanner.nextLine();
                }
                content = content.trim();
            } catch (Exception e) {
                //TODO: handle exception
                e.printStackTrace();
            }
            return content;
        }
        private static void writeFileContent(String fileName, String content){
            try (PrintWriter printWriter = new PrintWriter(fileName)){
                printWriter.write(content);
            }catch (Exception e){
                e.printStackTrace();
            }
        }

    }
  learner_created: false
- name: output.txt
  visible: true
  text: 111122223333
  learner_created: false
feedback_link: https://hyperskill.org/projects/46/stages/250/implement
status: Solved
record: 3
